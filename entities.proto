syntax = "proto3";

package playground_apps;
option go_package = "github.com/napptive/grpc-playground-apps-go;grpc_playground_apps_go";

import "validate/validate.proto";
import "playground-oam/entities.proto";
import "playground-oam3/entities.proto";

//
// Apps
//

// ComponentStatus defines the status of a component associated with an application configuration.
enum ComponentStatus{
    // Unknown with an undetermined status
    UNKNOWN = 0;
    // OK signals that all the replicas of the component are running. Notice that the number of replicas may be
    // specified in a trait.
    OK = 1; 
    // WARNING signals that some of the replicas of the component are running but some remain. This could mean that either
    // the replicas are being launched, or an error prevents the creation of the required replicas.
    WARNING = 2;
    // RUNNING signals that all the replicas of the component are running. Notice that the number of replicas may be
    // specified in a trait.
    RUNNING = 3;
    // TERMINATED All the task in a job are terminated
    TERMINATED = 4;
    // SCHEDULED a cronJob component is waiting to execute the jobs
    SCHEDULED = 5;
    // ERROR signals that there has been an error on a component.
    ERROR = 6;
}

// AppStatus defines the status of an application.
enum AppStatus{
    // Unknown with an undetermined status
    APP_UNKNOWN = 0;
    // AppOk signals that are elements of a given application are running.
    // We need OK status to be compatible with OAM2
    APP_OK= 1; 
    // AppWarning signals that some of the elements of an application are not running.
    APP_WARNING = 2;
    // AppRunning signals that are elements of a given application are running.
    APP_RUNNING = 3;
    // AppTerminated when an application without deployments neither statefulsets, only workflow and/or jobs terminated
    APP_TERMINATED = 4;
    // AppSuspended when the workflow is suspended waiting for a manual relaunch
    APP_SUSPENDED = 5; 
    // AppScheduled when an application with cronJobs are waiting to execute the jobs
    APP_SCHEDULED = 6;
    // AppError signals that the application is on an error state.
    APP_ERROR = 7;
}

// Application top level entity.
message Application{
    // AppId with the application identifier.
    string app_id = 1;
    // Name of the app.
    string name = 2;
    // VisualId contains a hash unique to the instance for representation purposes.
    string visual_id = 3;
    // Status with the name of the overall status of the application.
    AppStatus status = 4;
    // Description of the application.
    string description = 5;
    // Version of the application
    string version = 6;
    // ComponentStatus with a map of the associated component status.
    map<string, ComponentStatus> component_status = 7;
    // Instance of the linked application configuration (v2 or v3 instance)
    oneof instance {
        // V2 with an OAM2 application
        playground_oam.ApplicationConfiguration v2 = 8;
        // V3 with an OAM3 application
        playground_oam3.Application v3 = 9;
    }
    // StatusName with the string representation of the status enum.
    string status_name = 10;
    // ComponentStatusName with the string representation of the component status.
    map<string, string> component_status_name = 11;
    // ComponentIngresses with a map associating component name with the list of associated ingresses.
    map<string, IngressList> component_ingresses = 12;
    // ErrorMessages with all the error messages in case of application status is error
    repeated string error_messages = 13;
    // InstanceYAML with the YAML representation of the referenced instance.
    string instance_yaml = 14;
    // InstanceJSON with the JSON representation of the referenced instance.
    string instance_json = 15;
}

// IngressInfo with the relevant information about an ingress.
message IngressInfo{
    // URL where the application is accessible.
    string url = 1;
}

// IngressList with a list of ingresses.
message IngressList{
    // ParentComponentName with the name of the component the ingress is attached to.
    string parent_component_name = 1;
    // Ingresses with the list of ingresses.
    repeated IngressInfo ingresses = 2;
}

// AppInfoRequest with the information required to ask for an application
message AppInfoRequest {
    // EnvironmentQualifiedName (EnvQN) contains both the account name and the environment name as
    // <account_name>/<env_name>.
    string environment_qualified_name = 1;
    // AccountId with the account identifier.
    string account_id = 2;
    // EnvironmentId with the environment identifier
    string environment_id = 3;
    // ApplicationName with the name of the application
    string application_name = 4;
    // IncludeYAMLConversion determines if the raw YAML representation is also included.
    bool include_yaml_conversion = 5;
    // IncludeJSONConversion determines if the raw JSON representation is also included.
    bool include_json_conversion = 6;
}

// AppSummaryListResponse with a subset of applications.
message AppSummaryListResponse{
    // Entries in the returned page.
    repeated AppSummary entries = 1;
    // From indicates the index of the first entry returned.
    int32 from = 2;
    // To indicates the index of the second entry returned.
    int32 to = 3;
}

// AppSummary with a summary of an application.
message AppSummary{
    // AppId with the application identifier.
    string app_id = 1;
    // Name of the app.
    string name = 2;    
    // VisualId contains a hash unique to the instance for representation purposes.
    string visual_id = 3;
    // Status with the name of the overall status of the application.
    AppStatus status = 4;
    // With the status as string
    string status_name = 5;
    map<string, ComponentStatus> component_status = 6;
    // ComponentStatusName with the string representation of the component status.
    map<string, string> component_status_name = 7;
}

//
// Applications
//

// RepoType with the repository (GITHUB for now)
enum RepoType{
    UNKNOWN_REPO = 0;
    // GITHUB repository
    GITHUB = 1;
}

// Language with the language with which the application is implemented
enum AppLanguage{
    AUTO_DISCOVER = 0;
    GOLANG = 1;
    PYTHON = 2;
    NODEJS = 3;
    STATIC = 4;
}

message ApplicationFromRepoConfiguration {
    RepoType repo_type = 1;
    // RepoConfig with the repo configuration
    // RepoUrl with the url where the GitHubRepo is
    string repo_url = 2 [(validate.rules).string.min_len = 1];
    // RepoUsername with the repository username. Required if the repository is private
    string repo_username = 3;
    // RepoPat with a personal access token. Required if the repository is public
    string repo_pat = 4;
    // ApplicationName with the name of the application
    string application_name = 5;
    // MainPath with the path of the main file
    string main_path = 6;
    // Language with the application language
    AppLanguage language = 7;
    // Envs with the application environment variables
    map<string, string> envs = 8;
    // Ports with the ports to be exposed
    repeated int32 ports = 9;
    // IngressPorts with the port where an ingress is required
    repeated int32 ingress_ports = 10;
    // ExecArgs with a array with arguments required to run the application
    repeated string exec_args = 11;
}

enum DeploySource{
    UNKNOWN_DEPLOY_SOURCE = 0;
    // DeployFromType_FromData to indicate the deploy request contains the application files
    FROM_DATA = 1;
    // DeployFromType_FromRepo to indicate the deploy request contains the repo url where the application is
    FROM_REPO = 2;
}

// AppDataType to indicate if the data is a tgz or a YAML
enum AppDataType {
    UNKNOWN_FORMAT= 0;
    TGZ = 1;
    YAML = 2;
}

// DeployApplicationRequest with the information required to send a
// deploy request.
message DeployApplicationRequest {
    // DeployFrom to indicate the deploy source
    DeploySource deploy_from  = 1;
    // ApplicationDataType with the type of the data received in application_data field
    AppDataType application_data_type = 2;
    // ApplicationData with the compressed application descriptors. The data must
    // be compressed as tgz.
    bytes application_data = 3;
    // TargetEnvironmentQualifiedName specifying the target environment in the user
    // account as account_name/env_name.
    string target_environment_qualified_name = 4;
    // InstanceConfiguration with the configuration which the application will be deployed
    // indexed by the original application name. This approach enables the catalog to support
    // application packages that deploy more than one application.
    map<string, ApplicationInstanceConfiguration> instance_configuration = 5;
    // RepoConfig with the configuration required to deploy an application from Repository
    ApplicationFromRepoConfiguration repo_conf = 6;
}


// RemoveApplicationRequest to remove an application instance.
message RemoveApplicationRequest {
    // TargetEnvironmentQualifiedName specifying the target environment in the user
    // account as account_name/env_name.
    string target_environment_qualified_name = 1;
    // AccountId with the account identifier.
    string account_id = 2;
    // EnvironmentId with the environment identifier
    string environment_id = 3;
    // ApplicationName to be removed.
    string application_name = 4 [(validate.rules).string.min_len = 1];
}

// ResumeApplicationRequest to resume a workflow application.
message ResumeApplicationRequest {
    // TargetEnvironmentQualifiedName specifying the target environment in the user
    // account as account_name/env_name.
    string target_environment_qualified_name = 1;
    // AccountId with the account identifier.
    string account_id = 2;
    // EnvironmentId with the environment identifier
    string environment_id = 3;
    // ApplicationName to be removed.
    string application_name = 4 [(validate.rules).string.min_len = 1];
}

// ApplicationInstanceConfiguration with the configuration with which the application will be deployed
message ApplicationInstanceConfiguration{
    // ApplicationName with the new name for the application instance. If empty, the default name will be used.
    string application_name = 1;
    // SpecComponentsRaw with the component specification in yaml format (parameters, traits, etc.). This
    // value will overwrite the spec.components one of the application if not empty. The default specification
    // will be used otherwise.
    string spec_components_raw = 2;
}


//
// Logs
//

// LogRequest with the information required to ask for application logs
message LogRequest {
    // EnvironmentQualifiedName (EnvQN) contains both the account name and the environment name as
    // <account_name>/<env_name>.
    string environment_qualified_name = 1;
    // AccountId with the account identifier.
    string account_id = 2;
    // EnvironmentId with the environment identifier
    string environment_id = 3;
    // ApplicationName with the name of the application
    string application_name = 4 [(validate.rules).string.min_len = 1];
    //ComponentName with the name of the component to filter logs
    string component_name = 5;
    // SinceNano with the timestamp time in nanoseconds from which the logs are requested
    int64 since_nano = 6;
}

// ApplicationLogs
message ApplicationLogs {
    // ApplicationName with the name of the application
    string application_name = 1;
    // Timestamp of the last entry in the log
    int64 last_entry_nano = 2;
    // Logs with the application logs
    repeated LogEntry logs = 3;
}

// LogEntry with a log info
message LogEntry {
    // Timestamp with the log timestamp
    int64 timestamp = 1;
    // ComponentName with the name of the component
    string component_name = 2;
    // PodName with the name of the pod
    string pod_name = 3;
    // Log with the log content
    string log = 4;
}