// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: playground-apps/entities.proto

package grpc_playground_apps_go

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Application with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Application) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Application with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApplicationMultiError, or
// nil if none found.
func (m *Application) ValidateAll() error {
	return m.validate(true)
}

func (m *Application) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for Name

	// no validation rules for VisualId

	// no validation rules for Status

	// no validation rules for Description

	// no validation rules for Version

	// no validation rules for ComponentStatus

	// no validation rules for StatusName

	// no validation rules for ComponentStatusName

	for key, val := range m.GetComponentIngresses() {
		_ = val

		// no validation rules for ComponentIngresses[key]

		if all {
			switch v := interface{}(val).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationValidationError{
						field:  fmt.Sprintf("ComponentIngresses[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationValidationError{
						field:  fmt.Sprintf("ComponentIngresses[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationValidationError{
					field:  fmt.Sprintf("ComponentIngresses[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for InstanceYaml

	// no validation rules for InstanceJson

	for idx, item := range m.GetComponentSummary() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationValidationError{
						field:  fmt.Sprintf("ComponentSummary[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationValidationError{
						field:  fmt.Sprintf("ComponentSummary[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationValidationError{
					field:  fmt.Sprintf("ComponentSummary[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	switch m.Instance.(type) {

	case *Application_V3:

		if all {
			switch v := interface{}(m.GetV3()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationValidationError{
						field:  "V3",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationValidationError{
						field:  "V3",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetV3()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationValidationError{
					field:  "V3",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApplicationMultiError(errors)
	}
	return nil
}

// ApplicationMultiError is an error wrapping multiple validation errors
// returned by Application.ValidateAll() if the designated constraints aren't met.
type ApplicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationMultiError) AllErrors() []error { return m }

// ApplicationValidationError is the validation error returned by
// Application.Validate if the designated constraints aren't met.
type ApplicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationValidationError) ErrorName() string { return "ApplicationValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationValidationError{}

// Validate checks the field values on ComponentSummary with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ComponentSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComponentSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ComponentSummaryMultiError, or nil if none found.
func (m *ComponentSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *ComponentSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ComponentName

	// no validation rules for Replicas

	// no validation rules for SupportsOpScale

	// no validation rules for SupportsOpStop

	if len(errors) > 0 {
		return ComponentSummaryMultiError(errors)
	}
	return nil
}

// ComponentSummaryMultiError is an error wrapping multiple validation errors
// returned by ComponentSummary.ValidateAll() if the designated constraints
// aren't met.
type ComponentSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComponentSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComponentSummaryMultiError) AllErrors() []error { return m }

// ComponentSummaryValidationError is the validation error returned by
// ComponentSummary.Validate if the designated constraints aren't met.
type ComponentSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComponentSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComponentSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComponentSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComponentSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComponentSummaryValidationError) ErrorName() string { return "ComponentSummaryValidationError" }

// Error satisfies the builtin error interface
func (e ComponentSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComponentSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComponentSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComponentSummaryValidationError{}

// Validate checks the field values on IngressInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IngressInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IngressInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IngressInfoMultiError, or
// nil if none found.
func (m *IngressInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *IngressInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return IngressInfoMultiError(errors)
	}
	return nil
}

// IngressInfoMultiError is an error wrapping multiple validation errors
// returned by IngressInfo.ValidateAll() if the designated constraints aren't met.
type IngressInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngressInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngressInfoMultiError) AllErrors() []error { return m }

// IngressInfoValidationError is the validation error returned by
// IngressInfo.Validate if the designated constraints aren't met.
type IngressInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressInfoValidationError) ErrorName() string { return "IngressInfoValidationError" }

// Error satisfies the builtin error interface
func (e IngressInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngressInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressInfoValidationError{}

// Validate checks the field values on IngressList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IngressList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IngressList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IngressListMultiError, or
// nil if none found.
func (m *IngressList) ValidateAll() error {
	return m.validate(true)
}

func (m *IngressList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParentComponentName

	for idx, item := range m.GetIngresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IngressListValidationError{
						field:  fmt.Sprintf("Ingresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IngressListValidationError{
						field:  fmt.Sprintf("Ingresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IngressListValidationError{
					field:  fmt.Sprintf("Ingresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IngressListMultiError(errors)
	}
	return nil
}

// IngressListMultiError is an error wrapping multiple validation errors
// returned by IngressList.ValidateAll() if the designated constraints aren't met.
type IngressListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngressListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngressListMultiError) AllErrors() []error { return m }

// IngressListValidationError is the validation error returned by
// IngressList.Validate if the designated constraints aren't met.
type IngressListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressListValidationError) ErrorName() string { return "IngressListValidationError" }

// Error satisfies the builtin error interface
func (e IngressListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngressList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressListValidationError{}

// Validate checks the field values on AppInfoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppInfoRequestMultiError,
// or nil if none found.
func (m *AppInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AppInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnvironmentQualifiedName

	// no validation rules for AccountId

	// no validation rules for EnvironmentId

	// no validation rules for ApplicationName

	// no validation rules for IncludeYamlConversion

	// no validation rules for IncludeJsonConversion

	if len(errors) > 0 {
		return AppInfoRequestMultiError(errors)
	}
	return nil
}

// AppInfoRequestMultiError is an error wrapping multiple validation errors
// returned by AppInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type AppInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppInfoRequestMultiError) AllErrors() []error { return m }

// AppInfoRequestValidationError is the validation error returned by
// AppInfoRequest.Validate if the designated constraints aren't met.
type AppInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppInfoRequestValidationError) ErrorName() string { return "AppInfoRequestValidationError" }

// Error satisfies the builtin error interface
func (e AppInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppInfoRequestValidationError{}

// Validate checks the field values on AppSummaryListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppSummaryListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppSummaryListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppSummaryListResponseMultiError, or nil if none found.
func (m *AppSummaryListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AppSummaryListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AppSummaryListResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AppSummaryListResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppSummaryListResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for From

	// no validation rules for To

	if len(errors) > 0 {
		return AppSummaryListResponseMultiError(errors)
	}
	return nil
}

// AppSummaryListResponseMultiError is an error wrapping multiple validation
// errors returned by AppSummaryListResponse.ValidateAll() if the designated
// constraints aren't met.
type AppSummaryListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppSummaryListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppSummaryListResponseMultiError) AllErrors() []error { return m }

// AppSummaryListResponseValidationError is the validation error returned by
// AppSummaryListResponse.Validate if the designated constraints aren't met.
type AppSummaryListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppSummaryListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppSummaryListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppSummaryListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppSummaryListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppSummaryListResponseValidationError) ErrorName() string {
	return "AppSummaryListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AppSummaryListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppSummaryListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppSummaryListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppSummaryListResponseValidationError{}

// Validate checks the field values on AppSummary with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppSummary with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppSummaryMultiError, or
// nil if none found.
func (m *AppSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *AppSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for Name

	// no validation rules for VisualId

	// no validation rules for Status

	// no validation rules for StatusName

	// no validation rules for ComponentStatus

	// no validation rules for ComponentStatusName

	for idx, item := range m.GetComponentSummary() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AppSummaryValidationError{
						field:  fmt.Sprintf("ComponentSummary[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AppSummaryValidationError{
						field:  fmt.Sprintf("ComponentSummary[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppSummaryValidationError{
					field:  fmt.Sprintf("ComponentSummary[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AppSummaryMultiError(errors)
	}
	return nil
}

// AppSummaryMultiError is an error wrapping multiple validation errors
// returned by AppSummary.ValidateAll() if the designated constraints aren't met.
type AppSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppSummaryMultiError) AllErrors() []error { return m }

// AppSummaryValidationError is the validation error returned by
// AppSummary.Validate if the designated constraints aren't met.
type AppSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppSummaryValidationError) ErrorName() string { return "AppSummaryValidationError" }

// Error satisfies the builtin error interface
func (e AppSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppSummaryValidationError{}

// Validate checks the field values on ApplicationFromRepoConfiguration with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ApplicationFromRepoConfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationFromRepoConfiguration with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ApplicationFromRepoConfigurationMultiError, or nil if none found.
func (m *ApplicationFromRepoConfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationFromRepoConfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RepoType

	if utf8.RuneCountInString(m.GetRepoUrl()) < 1 {
		err := ApplicationFromRepoConfigurationValidationError{
			field:  "RepoUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RepoUsername

	// no validation rules for RepoPat

	// no validation rules for ApplicationName

	// no validation rules for MainPath

	// no validation rules for Language

	// no validation rules for Envs

	if len(errors) > 0 {
		return ApplicationFromRepoConfigurationMultiError(errors)
	}
	return nil
}

// ApplicationFromRepoConfigurationMultiError is an error wrapping multiple
// validation errors returned by
// ApplicationFromRepoConfiguration.ValidateAll() if the designated
// constraints aren't met.
type ApplicationFromRepoConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationFromRepoConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationFromRepoConfigurationMultiError) AllErrors() []error { return m }

// ApplicationFromRepoConfigurationValidationError is the validation error
// returned by ApplicationFromRepoConfiguration.Validate if the designated
// constraints aren't met.
type ApplicationFromRepoConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationFromRepoConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationFromRepoConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationFromRepoConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationFromRepoConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationFromRepoConfigurationValidationError) ErrorName() string {
	return "ApplicationFromRepoConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationFromRepoConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationFromRepoConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationFromRepoConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationFromRepoConfigurationValidationError{}

// Validate checks the field values on DeployApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeployApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeployApplicationResponseMultiError, or nil if none found.
func (m *DeployApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnvironmentName

	// no validation rules for AccountName

	// no validation rules for ApplicationName

	// no validation rules for Message

	if len(errors) > 0 {
		return DeployApplicationResponseMultiError(errors)
	}
	return nil
}

// DeployApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by DeployApplicationResponse.ValidateAll() if the
// designated constraints aren't met.
type DeployApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployApplicationResponseMultiError) AllErrors() []error { return m }

// DeployApplicationResponseValidationError is the validation error returned by
// DeployApplicationResponse.Validate if the designated constraints aren't met.
type DeployApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployApplicationResponseValidationError) ErrorName() string {
	return "DeployApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeployApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployApplicationResponseValidationError{}

// Validate checks the field values on DeployApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeployApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeployApplicationRequestMultiError, or nil if none found.
func (m *DeployApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeployFrom

	// no validation rules for ApplicationDataType

	// no validation rules for ApplicationData

	// no validation rules for TargetEnvironmentQualifiedName

	for key, val := range m.GetInstanceConfiguration() {
		_ = val

		// no validation rules for InstanceConfiguration[key]

		if all {
			switch v := interface{}(val).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeployApplicationRequestValidationError{
						field:  fmt.Sprintf("InstanceConfiguration[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeployApplicationRequestValidationError{
						field:  fmt.Sprintf("InstanceConfiguration[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeployApplicationRequestValidationError{
					field:  fmt.Sprintf("InstanceConfiguration[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetRepoConf()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeployApplicationRequestValidationError{
					field:  "RepoConf",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeployApplicationRequestValidationError{
					field:  "RepoConf",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRepoConf()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeployApplicationRequestValidationError{
				field:  "RepoConf",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeployApplicationRequestMultiError(errors)
	}
	return nil
}

// DeployApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by DeployApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type DeployApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployApplicationRequestMultiError) AllErrors() []error { return m }

// DeployApplicationRequestValidationError is the validation error returned by
// DeployApplicationRequest.Validate if the designated constraints aren't met.
type DeployApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployApplicationRequestValidationError) ErrorName() string {
	return "DeployApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeployApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployApplicationRequestValidationError{}

// Validate checks the field values on RemoveApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveApplicationRequestMultiError, or nil if none found.
func (m *RemoveApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TargetEnvironmentQualifiedName

	// no validation rules for AccountId

	// no validation rules for EnvironmentId

	if utf8.RuneCountInString(m.GetApplicationName()) < 1 {
		err := RemoveApplicationRequestValidationError{
			field:  "ApplicationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveApplicationRequestMultiError(errors)
	}
	return nil
}

// RemoveApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveApplicationRequestMultiError) AllErrors() []error { return m }

// RemoveApplicationRequestValidationError is the validation error returned by
// RemoveApplicationRequest.Validate if the designated constraints aren't met.
type RemoveApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveApplicationRequestValidationError) ErrorName() string {
	return "RemoveApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveApplicationRequestValidationError{}

// Validate checks the field values on ApplicationInstanceConfiguration with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ApplicationInstanceConfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationInstanceConfiguration with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ApplicationInstanceConfigurationMultiError, or nil if none found.
func (m *ApplicationInstanceConfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationInstanceConfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationName

	// no validation rules for SpecComponentsRaw

	if len(errors) > 0 {
		return ApplicationInstanceConfigurationMultiError(errors)
	}
	return nil
}

// ApplicationInstanceConfigurationMultiError is an error wrapping multiple
// validation errors returned by
// ApplicationInstanceConfiguration.ValidateAll() if the designated
// constraints aren't met.
type ApplicationInstanceConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationInstanceConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationInstanceConfigurationMultiError) AllErrors() []error { return m }

// ApplicationInstanceConfigurationValidationError is the validation error
// returned by ApplicationInstanceConfiguration.Validate if the designated
// constraints aren't met.
type ApplicationInstanceConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationInstanceConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationInstanceConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationInstanceConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationInstanceConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationInstanceConfigurationValidationError) ErrorName() string {
	return "ApplicationInstanceConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationInstanceConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationInstanceConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationInstanceConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationInstanceConfigurationValidationError{}

// Validate checks the field values on LogRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogRequestMultiError, or
// nil if none found.
func (m *LogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnvironmentQualifiedName

	// no validation rules for AccountId

	// no validation rules for EnvironmentId

	if utf8.RuneCountInString(m.GetApplicationName()) < 1 {
		err := LogRequestValidationError{
			field:  "ApplicationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ComponentName

	// no validation rules for SinceNano

	// no validation rules for CleanLogs

	if len(errors) > 0 {
		return LogRequestMultiError(errors)
	}
	return nil
}

// LogRequestMultiError is an error wrapping multiple validation errors
// returned by LogRequest.ValidateAll() if the designated constraints aren't met.
type LogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogRequestMultiError) AllErrors() []error { return m }

// LogRequestValidationError is the validation error returned by
// LogRequest.Validate if the designated constraints aren't met.
type LogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogRequestValidationError) ErrorName() string { return "LogRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogRequestValidationError{}

// Validate checks the field values on ApplicationLogs with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApplicationLogs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationLogs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationLogsMultiError, or nil if none found.
func (m *ApplicationLogs) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationLogs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationName

	// no validation rules for LastEntryNano

	for idx, item := range m.GetLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationLogsValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationLogsValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationLogsValidationError{
					field:  fmt.Sprintf("Logs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApplicationLogsMultiError(errors)
	}
	return nil
}

// ApplicationLogsMultiError is an error wrapping multiple validation errors
// returned by ApplicationLogs.ValidateAll() if the designated constraints
// aren't met.
type ApplicationLogsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationLogsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationLogsMultiError) AllErrors() []error { return m }

// ApplicationLogsValidationError is the validation error returned by
// ApplicationLogs.Validate if the designated constraints aren't met.
type ApplicationLogsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationLogsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationLogsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationLogsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationLogsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationLogsValidationError) ErrorName() string { return "ApplicationLogsValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationLogsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationLogs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationLogsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationLogsValidationError{}

// Validate checks the field values on LogEntry with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogEntry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogEntry with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogEntryMultiError, or nil
// if none found.
func (m *LogEntry) ValidateAll() error {
	return m.validate(true)
}

func (m *LogEntry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for ComponentName

	// no validation rules for PodName

	// no validation rules for Log

	if len(errors) > 0 {
		return LogEntryMultiError(errors)
	}
	return nil
}

// LogEntryMultiError is an error wrapping multiple validation errors returned
// by LogEntry.ValidateAll() if the designated constraints aren't met.
type LogEntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogEntryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogEntryMultiError) AllErrors() []error { return m }

// LogEntryValidationError is the validation error returned by
// LogEntry.Validate if the designated constraints aren't met.
type LogEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogEntryValidationError) ErrorName() string { return "LogEntryValidationError" }

// Error satisfies the builtin error interface
func (e LogEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogEntryValidationError{}

// Validate checks the field values on ComponentReplicas with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ComponentReplicas) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComponentReplicas with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ComponentReplicasMultiError, or nil if none found.
func (m *ComponentReplicas) ValidateAll() error {
	return m.validate(true)
}

func (m *ComponentReplicas) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ComponentName

	// no validation rules for Replicas

	if len(errors) > 0 {
		return ComponentReplicasMultiError(errors)
	}
	return nil
}

// ComponentReplicasMultiError is an error wrapping multiple validation errors
// returned by ComponentReplicas.ValidateAll() if the designated constraints
// aren't met.
type ComponentReplicasMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComponentReplicasMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComponentReplicasMultiError) AllErrors() []error { return m }

// ComponentReplicasValidationError is the validation error returned by
// ComponentReplicas.Validate if the designated constraints aren't met.
type ComponentReplicasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComponentReplicasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComponentReplicasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComponentReplicasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComponentReplicasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComponentReplicasValidationError) ErrorName() string {
	return "ComponentReplicasValidationError"
}

// Error satisfies the builtin error interface
func (e ComponentReplicasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComponentReplicas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComponentReplicasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComponentReplicasValidationError{}

// Validate checks the field values on ScaleRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScaleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScaleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScaleRequestMultiError, or
// nil if none found.
func (m *ScaleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScaleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnvironmentQualifiedName

	// no validation rules for AccountId

	// no validation rules for EnvironmentId

	if utf8.RuneCountInString(m.GetApplicationName()) < 1 {
		err := ScaleRequestValidationError{
			field:  "ApplicationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetComponents()) < 1 {
		err := ScaleRequestValidationError{
			field:  "Components",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetComponents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScaleRequestValidationError{
						field:  fmt.Sprintf("Components[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScaleRequestValidationError{
						field:  fmt.Sprintf("Components[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScaleRequestValidationError{
					field:  fmt.Sprintf("Components[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ScaleRequestMultiError(errors)
	}
	return nil
}

// ScaleRequestMultiError is an error wrapping multiple validation errors
// returned by ScaleRequest.ValidateAll() if the designated constraints aren't met.
type ScaleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScaleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScaleRequestMultiError) AllErrors() []error { return m }

// ScaleRequestValidationError is the validation error returned by
// ScaleRequest.Validate if the designated constraints aren't met.
type ScaleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScaleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScaleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScaleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScaleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScaleRequestValidationError) ErrorName() string { return "ScaleRequestValidationError" }

// Error satisfies the builtin error interface
func (e ScaleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScaleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScaleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScaleRequestValidationError{}

// Validate checks the field values on StopApplicationComponentsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StopApplicationComponentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopApplicationComponentsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StopApplicationComponentsRequestMultiError, or nil if none found.
func (m *StopApplicationComponentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopApplicationComponentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnvironmentQualifiedName

	// no validation rules for AccountId

	// no validation rules for EnvironmentId

	if utf8.RuneCountInString(m.GetApplicationName()) < 1 {
		err := StopApplicationComponentsRequestValidationError{
			field:  "ApplicationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetComponents()) < 1 {
		err := StopApplicationComponentsRequestValidationError{
			field:  "Components",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StopApplicationComponentsRequestMultiError(errors)
	}
	return nil
}

// StopApplicationComponentsRequestMultiError is an error wrapping multiple
// validation errors returned by
// StopApplicationComponentsRequest.ValidateAll() if the designated
// constraints aren't met.
type StopApplicationComponentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopApplicationComponentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopApplicationComponentsRequestMultiError) AllErrors() []error { return m }

// StopApplicationComponentsRequestValidationError is the validation error
// returned by StopApplicationComponentsRequest.Validate if the designated
// constraints aren't met.
type StopApplicationComponentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopApplicationComponentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopApplicationComponentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopApplicationComponentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopApplicationComponentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopApplicationComponentsRequestValidationError) ErrorName() string {
	return "StopApplicationComponentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopApplicationComponentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopApplicationComponentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopApplicationComponentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopApplicationComponentsRequestValidationError{}

// Validate checks the field values on ResumeApplicationComponentsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ResumeApplicationComponentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResumeApplicationComponentsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ResumeApplicationComponentsRequestMultiError, or nil if none found.
func (m *ResumeApplicationComponentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResumeApplicationComponentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnvironmentQualifiedName

	// no validation rules for AccountId

	// no validation rules for EnvironmentId

	if utf8.RuneCountInString(m.GetApplicationName()) < 1 {
		err := ResumeApplicationComponentsRequestValidationError{
			field:  "ApplicationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetComponents()) < 1 {
		err := ResumeApplicationComponentsRequestValidationError{
			field:  "Components",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResumeApplicationComponentsRequestMultiError(errors)
	}
	return nil
}

// ResumeApplicationComponentsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ResumeApplicationComponentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ResumeApplicationComponentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResumeApplicationComponentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResumeApplicationComponentsRequestMultiError) AllErrors() []error { return m }

// ResumeApplicationComponentsRequestValidationError is the validation error
// returned by ResumeApplicationComponentsRequest.Validate if the designated
// constraints aren't met.
type ResumeApplicationComponentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResumeApplicationComponentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResumeApplicationComponentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResumeApplicationComponentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResumeApplicationComponentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResumeApplicationComponentsRequestValidationError) ErrorName() string {
	return "ResumeApplicationComponentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResumeApplicationComponentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResumeApplicationComponentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResumeApplicationComponentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResumeApplicationComponentsRequestValidationError{}

// Validate checks the field values on ValidateRepoAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateRepoAccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateRepoAccessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateRepoAccessRequestMultiError, or nil if none found.
func (m *ValidateRepoAccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateRepoAccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RepoType

	if utf8.RuneCountInString(m.GetRepoUrl()) < 1 {
		err := ValidateRepoAccessRequestValidationError{
			field:  "RepoUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RepoPat

	if len(errors) > 0 {
		return ValidateRepoAccessRequestMultiError(errors)
	}
	return nil
}

// ValidateRepoAccessRequestMultiError is an error wrapping multiple validation
// errors returned by ValidateRepoAccessRequest.ValidateAll() if the
// designated constraints aren't met.
type ValidateRepoAccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateRepoAccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateRepoAccessRequestMultiError) AllErrors() []error { return m }

// ValidateRepoAccessRequestValidationError is the validation error returned by
// ValidateRepoAccessRequest.Validate if the designated constraints aren't met.
type ValidateRepoAccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateRepoAccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateRepoAccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateRepoAccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateRepoAccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateRepoAccessRequestValidationError) ErrorName() string {
	return "ValidateRepoAccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateRepoAccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateRepoAccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateRepoAccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateRepoAccessRequestValidationError{}

// Validate checks the field values on UpdateApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateApplicationRequestMultiError, or nil if none found.
func (m *UpdateApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TargetEnvironmentQualifiedName

	// no validation rules for AccountId

	// no validation rules for EnvironmentId

	if utf8.RuneCountInString(m.GetApplicationName()) < 1 {
		err := UpdateApplicationRequestValidationError{
			field:  "ApplicationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRawYaml()) < 1 {
		err := UpdateApplicationRequestValidationError{
			field:  "RawYaml",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateApplicationRequestMultiError(errors)
	}
	return nil
}

// UpdateApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApplicationRequestMultiError) AllErrors() []error { return m }

// UpdateApplicationRequestValidationError is the validation error returned by
// UpdateApplicationRequest.Validate if the designated constraints aren't met.
type UpdateApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationRequestValidationError) ErrorName() string {
	return "UpdateApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationRequestValidationError{}

// Validate checks the field values on ResumeWorkflowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResumeWorkflowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResumeWorkflowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResumeWorkflowRequestMultiError, or nil if none found.
func (m *ResumeWorkflowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResumeWorkflowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TargetEnvironmentQualifiedName

	// no validation rules for AccountId

	// no validation rules for EnvironmentId

	if utf8.RuneCountInString(m.GetApplicationName()) < 1 {
		err := ResumeWorkflowRequestValidationError{
			field:  "ApplicationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResumeWorkflowRequestMultiError(errors)
	}
	return nil
}

// ResumeWorkflowRequestMultiError is an error wrapping multiple validation
// errors returned by ResumeWorkflowRequest.ValidateAll() if the designated
// constraints aren't met.
type ResumeWorkflowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResumeWorkflowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResumeWorkflowRequestMultiError) AllErrors() []error { return m }

// ResumeWorkflowRequestValidationError is the validation error returned by
// ResumeWorkflowRequest.Validate if the designated constraints aren't met.
type ResumeWorkflowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResumeWorkflowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResumeWorkflowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResumeWorkflowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResumeWorkflowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResumeWorkflowRequestValidationError) ErrorName() string {
	return "ResumeWorkflowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResumeWorkflowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResumeWorkflowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResumeWorkflowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResumeWorkflowRequestValidationError{}
