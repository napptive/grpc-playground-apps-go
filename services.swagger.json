{
  "swagger": "2.0",
  "info": {
    "title": "playground-apps/services.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v0/apps/deploy": {
      "post": {
        "summary": "Deploy an application.",
        "operationId": "Apps_Deploy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/playground_appsDeployApplicationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/playground_appsDeployApplicationRequest"
            }
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/v0/apps/get": {
      "post": {
        "summary": "Get returns an application",
        "operationId": "Apps_Info",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/playground_appsApplication"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/playground_appsAppInfoRequest"
            }
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/v0/apps/logs": {
      "post": {
        "summary": "Logs returns the application logs (filtering by component if required)",
        "operationId": "Apps_Logs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/playground_appsApplicationLogs"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/playground_appsLogRequest"
            }
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/v0/apps/remove": {
      "post": {
        "summary": "Remove an application instance.",
        "operationId": "Apps_Remove",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/playground_commonOpResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/playground_appsRemoveApplicationRequest"
            }
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/v0/apps/repo/validate": {
      "post": {
        "summary": "ValidateRepoAccess to validate if a repository is accessible with the credentials received",
        "operationId": "Apps_ValidateRepoAccess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/playground_commonOpResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/playground_appsValidateRepoAccessRequest"
            }
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/v0/apps/resume": {
      "post": {
        "summary": "Resume a suspended workflow application.",
        "operationId": "Apps_Resume",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/playground_commonOpResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/playground_appsResumeApplicationRequest"
            }
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/v0/apps/summary/list": {
      "post": {
        "summary": "SummaryList returns a subset of application summaries found in the user cluster.",
        "operationId": "Apps_SummaryList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/playground_appsAppSummaryListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/playground_environmentsEnvironmentSelector"
            }
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/v0/apps/update": {
      "post": {
        "summary": "Update an application.",
        "operationId": "Apps_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/playground_commonOpResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/playground_appsUpdateApplicationRequest"
            }
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    }
  },
  "definitions": {
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "playground_appsAppDataType": {
      "type": "string",
      "enum": [
        "UNKNOWN_FORMAT",
        "TGZ",
        "YAML"
      ],
      "default": "UNKNOWN_FORMAT",
      "title": "AppDataType to indicate if the data is a tgz or a YAML"
    },
    "playground_appsAppInfoRequest": {
      "type": "object",
      "properties": {
        "environment_qualified_name": {
          "type": "string",
          "description": "EnvironmentQualifiedName (EnvQN) contains both the account name and the environment name as\n\u003caccount_name\u003e/\u003cenv_name\u003e."
        },
        "account_id": {
          "type": "string",
          "description": "AccountId with the account identifier."
        },
        "environment_id": {
          "type": "string",
          "title": "EnvironmentId with the environment identifier"
        },
        "application_name": {
          "type": "string",
          "title": "ApplicationName with the name of the application"
        },
        "include_yaml_conversion": {
          "type": "boolean",
          "description": "IncludeYAMLConversion determines if the raw YAML representation is also included."
        },
        "include_json_conversion": {
          "type": "boolean",
          "description": "IncludeJSONConversion determines if the raw JSON representation is also included."
        }
      },
      "title": "AppInfoRequest with the information required to ask for an application"
    },
    "playground_appsAppLanguage": {
      "type": "string",
      "enum": [
        "AUTO_DISCOVER",
        "GOLANG",
        "PYTHON",
        "NODEJS",
        "STATIC"
      ],
      "default": "AUTO_DISCOVER",
      "title": "Language with the language with which the application is implemented"
    },
    "playground_appsAppStatus": {
      "type": "string",
      "enum": [
        "APP_UNKNOWN",
        "APP_OK",
        "APP_WARNING",
        "APP_RUNNING",
        "APP_TERMINATED",
        "APP_SUSPENDED",
        "APP_SCHEDULED",
        "APP_ERROR"
      ],
      "default": "APP_UNKNOWN",
      "description": "AppStatus defines the status of an application.\n\n - APP_UNKNOWN: Unknown with an undetermined status\n - APP_OK: AppOk signals that are elements of a given application are running.\nWe need OK status to be compatible with OAM2\n - APP_WARNING: AppWarning signals that some of the elements of an application are not running.\n - APP_RUNNING: AppRunning signals that are elements of a given application are running.\n - APP_TERMINATED: AppTerminated when an application without deployments neither statefulsets, only workflow and/or jobs terminated\n - APP_SUSPENDED: AppSuspended when the workflow is suspended waiting for a manual relaunch\n - APP_SCHEDULED: AppScheduled when an application with cronJobs are waiting to execute the jobs\n - APP_ERROR: AppError signals that the application is on an error state."
    },
    "playground_appsAppSummary": {
      "type": "object",
      "properties": {
        "app_id": {
          "type": "string",
          "description": "AppId with the application identifier."
        },
        "name": {
          "type": "string",
          "description": "Name of the app."
        },
        "visual_id": {
          "type": "string",
          "description": "VisualId contains a hash unique to the instance for representation purposes."
        },
        "status": {
          "$ref": "#/definitions/playground_appsAppStatus",
          "description": "Status with the name of the overall status of the application."
        },
        "status_name": {
          "type": "string",
          "title": "With the status as string"
        },
        "component_status": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/playground_appsComponentStatus"
          }
        },
        "component_status_name": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "ComponentStatusName with the string representation of the component status."
        }
      },
      "description": "AppSummary with a summary of an application."
    },
    "playground_appsAppSummaryListResponse": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/playground_appsAppSummary"
          },
          "description": "Entries in the returned page."
        },
        "from": {
          "type": "integer",
          "format": "int32",
          "description": "From indicates the index of the first entry returned."
        },
        "to": {
          "type": "integer",
          "format": "int32",
          "description": "To indicates the index of the second entry returned."
        }
      },
      "description": "AppSummaryListResponse with a subset of applications."
    },
    "playground_appsApplication": {
      "type": "object",
      "properties": {
        "app_id": {
          "type": "string",
          "description": "AppId with the application identifier."
        },
        "name": {
          "type": "string",
          "description": "Name of the app."
        },
        "visual_id": {
          "type": "string",
          "description": "VisualId contains a hash unique to the instance for representation purposes."
        },
        "status": {
          "$ref": "#/definitions/playground_appsAppStatus",
          "description": "Status with the name of the overall status of the application."
        },
        "description": {
          "type": "string",
          "description": "Description of the application."
        },
        "version": {
          "type": "string",
          "title": "Version of the application"
        },
        "component_status": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/playground_appsComponentStatus"
          },
          "description": "ComponentStatus with a map of the associated component status."
        },
        "v3": {
          "$ref": "#/definitions/playground_oam3Application",
          "title": "V3 with an OAM3 application"
        },
        "status_name": {
          "type": "string",
          "description": "StatusName with the string representation of the status enum."
        },
        "component_status_name": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "ComponentStatusName with the string representation of the component status."
        },
        "component_ingresses": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/playground_appsIngressList"
          },
          "description": "ComponentIngresses with a map associating component name with the list of associated ingresses."
        },
        "error_messages": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "ErrorMessages with all the error messages in case of application status is error"
        },
        "instance_yaml": {
          "type": "string",
          "description": "InstanceYAML with the YAML representation of the referenced instance."
        },
        "instance_json": {
          "type": "string",
          "description": "InstanceJSON with the JSON representation of the referenced instance."
        }
      },
      "description": "Application top level entity."
    },
    "playground_appsApplicationFromRepoConfiguration": {
      "type": "object",
      "properties": {
        "repo_type": {
          "$ref": "#/definitions/playground_appsRepoType"
        },
        "repo_url": {
          "type": "string",
          "title": "RepoConfig with the repo configuration\nRepoUrl with the url where the GitHubRepo is"
        },
        "repo_username": {
          "type": "string",
          "title": "RepoUsername with the repository username. Required if the repository is private"
        },
        "repo_pat": {
          "type": "string",
          "title": "RepoPat with a personal access token. Required if the repository is public"
        },
        "application_name": {
          "type": "string",
          "title": "ApplicationName with the name of the application"
        },
        "main_path": {
          "type": "string",
          "title": "MainPath with the path of the main file"
        },
        "language": {
          "$ref": "#/definitions/playground_appsAppLanguage",
          "title": "Language with the application language"
        },
        "envs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Envs with the application environment variables"
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "title": "Ports with the ports to be exposed"
        },
        "ingress_ports": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "title": "IngressPorts with the port where an ingress is required"
        },
        "exec_args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "ExecArgs with a array with arguments required to run the application"
        }
      }
    },
    "playground_appsApplicationInstanceConfiguration": {
      "type": "object",
      "properties": {
        "application_name": {
          "type": "string",
          "description": "ApplicationName with the new name for the application instance. If empty, the default name will be used."
        },
        "spec_components_raw": {
          "type": "string",
          "description": "SpecComponentsRaw with the component specification in yaml format (parameters, traits, etc.). This\nvalue will overwrite the spec.components one of the application if not empty. The default specification\nwill be used otherwise."
        }
      },
      "title": "ApplicationInstanceConfiguration with the configuration with which the application will be deployed"
    },
    "playground_appsApplicationLogs": {
      "type": "object",
      "properties": {
        "application_name": {
          "type": "string",
          "title": "ApplicationName with the name of the application"
        },
        "last_entry_nano": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp of the last entry in the log"
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/playground_appsLogEntry"
          },
          "title": "Logs with the application logs"
        }
      },
      "title": "ApplicationLogs"
    },
    "playground_appsComponentStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "OK",
        "WARNING",
        "RUNNING",
        "TERMINATED",
        "SCHEDULED",
        "ERROR"
      ],
      "default": "UNKNOWN",
      "description": "ComponentStatus defines the status of a component associated with an application configuration.\n\n - UNKNOWN: Unknown with an undetermined status\n - OK: OK signals that all the replicas of the component are running. Notice that the number of replicas may be\nspecified in a trait.\n - WARNING: WARNING signals that some of the replicas of the component are running but some remain. This could mean that either\nthe replicas are being launched, or an error prevents the creation of the required replicas.\n - RUNNING: RUNNING signals that all the replicas of the component are running. Notice that the number of replicas may be\nspecified in a trait.\n - TERMINATED: TERMINATED All the task in a job are terminated\n - SCHEDULED: SCHEDULED a cronJob component is waiting to execute the jobs\n - ERROR: ERROR signals that there has been an error on a component."
    },
    "playground_appsDeployApplicationRequest": {
      "type": "object",
      "properties": {
        "deploy_from": {
          "$ref": "#/definitions/playground_appsDeploySource",
          "title": "DeployFrom to indicate the deploy source"
        },
        "application_data_type": {
          "$ref": "#/definitions/playground_appsAppDataType",
          "title": "ApplicationDataType with the type of the data received in application_data field"
        },
        "application_data": {
          "type": "string",
          "format": "byte",
          "description": "ApplicationData with the compressed application descriptors. The data must\nbe compressed as tgz."
        },
        "target_environment_qualified_name": {
          "type": "string",
          "description": "TargetEnvironmentQualifiedName specifying the target environment in the user\naccount as account_name/env_name."
        },
        "instance_configuration": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/playground_appsApplicationInstanceConfiguration"
          },
          "description": "InstanceConfiguration with the configuration which the application will be deployed\nindexed by the original application name. This approach enables the catalog to support\napplication packages that deploy more than one application."
        },
        "repo_conf": {
          "$ref": "#/definitions/playground_appsApplicationFromRepoConfiguration",
          "title": "RepoConfig with the configuration required to deploy an application from Repository"
        }
      },
      "description": "DeployApplicationRequest with the information required to send a\ndeploy request."
    },
    "playground_appsDeployApplicationResponse": {
      "type": "object",
      "properties": {
        "environment_name": {
          "type": "string",
          "title": "EnvironmentName with the name of the environment"
        },
        "account_name": {
          "type": "string",
          "title": "AccountName with the name of the account"
        },
        "application_name": {
          "type": "string",
          "title": "ApplicationName with the name of the application deployed"
        },
        "message": {
          "type": "string",
          "title": "Message with the operation message"
        }
      },
      "title": "DeployApplicationResponse with the response of a deploy operation"
    },
    "playground_appsDeploySource": {
      "type": "string",
      "enum": [
        "UNKNOWN_DEPLOY_SOURCE",
        "FROM_DATA",
        "FROM_REPO"
      ],
      "default": "UNKNOWN_DEPLOY_SOURCE",
      "title": "- FROM_DATA: DeployFromType_FromData to indicate the deploy request contains the application files\n - FROM_REPO: DeployFromType_FromRepo to indicate the deploy request contains the repo url where the application is"
    },
    "playground_appsIngressInfo": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "URL where the application is accessible."
        }
      },
      "description": "IngressInfo with the relevant information about an ingress."
    },
    "playground_appsIngressList": {
      "type": "object",
      "properties": {
        "parent_component_name": {
          "type": "string",
          "description": "ParentComponentName with the name of the component the ingress is attached to."
        },
        "ingresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/playground_appsIngressInfo"
          },
          "description": "Ingresses with the list of ingresses."
        }
      },
      "description": "IngressList with a list of ingresses."
    },
    "playground_appsLogEntry": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp with the log timestamp"
        },
        "component_name": {
          "type": "string",
          "title": "ComponentName with the name of the component"
        },
        "pod_name": {
          "type": "string",
          "title": "PodName with the name of the pod"
        },
        "log": {
          "type": "string",
          "title": "Log with the log content"
        }
      },
      "title": "LogEntry with a log info"
    },
    "playground_appsLogRequest": {
      "type": "object",
      "properties": {
        "environment_qualified_name": {
          "type": "string",
          "description": "EnvironmentQualifiedName (EnvQN) contains both the account name and the environment name as\n\u003caccount_name\u003e/\u003cenv_name\u003e."
        },
        "account_id": {
          "type": "string",
          "description": "AccountId with the account identifier."
        },
        "environment_id": {
          "type": "string",
          "title": "EnvironmentId with the environment identifier"
        },
        "application_name": {
          "type": "string",
          "title": "ApplicationName with the name of the application"
        },
        "component_name": {
          "type": "string",
          "title": "ComponentName with the name of the component to filter logs"
        },
        "since_nano": {
          "type": "string",
          "format": "int64",
          "title": "SinceNano with the timestamp time in nanoseconds from which the logs are requested"
        }
      },
      "title": "LogRequest with the information required to ask for application logs"
    },
    "playground_appsRemoveApplicationRequest": {
      "type": "object",
      "properties": {
        "target_environment_qualified_name": {
          "type": "string",
          "description": "TargetEnvironmentQualifiedName specifying the target environment in the user\naccount as account_name/env_name."
        },
        "account_id": {
          "type": "string",
          "description": "AccountId with the account identifier."
        },
        "environment_id": {
          "type": "string",
          "title": "EnvironmentId with the environment identifier"
        },
        "application_name": {
          "type": "string",
          "description": "ApplicationName to be removed."
        }
      },
      "description": "RemoveApplicationRequest to remove an application instance."
    },
    "playground_appsRepoType": {
      "type": "string",
      "enum": [
        "UNKNOWN_REPO",
        "GIT"
      ],
      "default": "UNKNOWN_REPO",
      "description": "- GIT: GIT repository",
      "title": "RepoType with the repository (GITHUB and GitLab for now)"
    },
    "playground_appsResumeApplicationRequest": {
      "type": "object",
      "properties": {
        "target_environment_qualified_name": {
          "type": "string",
          "description": "TargetEnvironmentQualifiedName specifying the target environment in the user\naccount as account_name/env_name."
        },
        "account_id": {
          "type": "string",
          "description": "AccountId with the account identifier."
        },
        "environment_id": {
          "type": "string",
          "title": "EnvironmentId with the environment identifier"
        },
        "application_name": {
          "type": "string",
          "description": "ApplicationName to be removed."
        }
      },
      "description": "ResumeApplicationRequest to resume a workflow application."
    },
    "playground_appsUpdateApplicationRequest": {
      "type": "object",
      "properties": {
        "target_environment_qualified_name": {
          "type": "string",
          "description": "TargetEnvironmentQualifiedName specifying the target environment in the user\naccount as account_name/env_name."
        },
        "account_id": {
          "type": "string",
          "description": "AccountId with the account identifier."
        },
        "environment_id": {
          "type": "string",
          "title": "EnvironmentId with the environment identifier"
        },
        "application_name": {
          "type": "string",
          "description": "ApplicationName to be removed."
        },
        "raw_yaml": {
          "type": "string",
          "title": "RawYaml with a YAML with the new application (base64 decoded)"
        }
      },
      "title": "UpdateApplicationRequest with the information required to update a deployed application"
    },
    "playground_appsValidateRepoAccessRequest": {
      "type": "object",
      "properties": {
        "repo_type": {
          "$ref": "#/definitions/playground_appsRepoType",
          "title": "RepoType with the repository type (GitHub for now)"
        },
        "repo_url": {
          "type": "string",
          "title": "RepoConfig with the repo configuration\nRepoUrl with the url where the GitHubRepo is"
        },
        "repo_pat": {
          "type": "string",
          "title": "RepoPat with a personal access token. Required if the repository is private"
        }
      },
      "title": "ValidateRepoAccessRequest with the information required to validate if repo is accessible"
    },
    "playground_commonOpResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/playground_commonOpStatus",
          "description": "Status of the operation."
        },
        "status_name": {
          "type": "string",
          "description": "StatusName with the string representation of the status."
        },
        "user_info": {
          "type": "string",
          "description": "UserInfo with additional information to show to the user."
        }
      },
      "description": "OpResponse with a common definition for the result of executing an operation through gRPC. Notice that\nin case of an error, the call must fail unless the operation is executed asynchronously and this\nmessage contains the result of a past operation."
    },
    "playground_commonOpStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SUCCESS"
      ],
      "default": "UNKNOWN",
      "description": "OpStatus enumeration defining the possible status of an operation.\n\n - UNKNOWN: Unknown operation status indicates an error in the processing of the request as all operations should\nhave a determined status.\n - SUCCESS: Success indicates that the operation was completed successfully."
    },
    "playground_environmentsEnvironmentSelector": {
      "type": "object",
      "properties": {
        "environment_qualified_name": {
          "type": "string",
          "description": "EnvironmentQualifiedName (EnvQN) contains both the account name and the environment name as\n\u003caccount_name\u003e/\u003cenv_name\u003e."
        },
        "account_id": {
          "type": "string",
          "description": "AccountId with the account identifier."
        },
        "environment_id": {
          "type": "string",
          "title": "EnvironmentId with the environment identifier"
        }
      },
      "title": "EnvironmentSelector with information to determine the target environment. The current selected\nenvironment as specified in the JWT will be used otherwise.\nKeep in mind that we can select an environment through EnvironmentQualifiedName or\nthrough the combination of AccountId and EnvironmentId, being incompatible the use of the two selectors at\nthe same time"
    },
    "playground_oam3Application": {
      "type": "object",
      "properties": {
        "api_version": {
          "type": "string",
          "description": "ApiVersion of the given application."
        },
        "kind": {
          "type": "string",
          "description": "Kind of the application."
        },
        "metadata": {
          "$ref": "#/definitions/playground_oam3Metadata",
          "description": "Metadata associated with the application."
        },
        "spec": {
          "$ref": "#/definitions/playground_oam3ApplicationSpec",
          "description": "Spec of the application."
        },
        "status": {
          "$ref": "#/definitions/playground_oam3ApplicationStatus",
          "description": "Status of the application."
        }
      },
      "description": "Application entity describing the components that form an application."
    },
    "playground_oam3ApplicationComponent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the component."
        },
        "type": {
          "type": "string",
          "description": "Type of the component associated with the ComponentDefinition."
        },
        "external_revision": {
          "type": "string",
          "description": "ExternalRevision of the component."
        },
        "properties": {
          "type": "object",
          "description": "Properties of the component. This field sets the values to the parameters exposed from the component schematic."
        },
        "depends_on": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "DependsOn indicates component dependencies."
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/playground_oam3InputItem"
          },
          "description": "Inputs that are used in the component."
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/playground_oam3OutputItem"
          },
          "description": "Outputs produced by the component."
        },
        "traits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/playground_oam3ApplicationTrait"
          },
          "description": "Traits applied in the component."
        },
        "scopes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Scopes being applied to the component in the form of scope-type:scope-instance-name."
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Images used by the component definition"
        }
      },
      "description": "ApplicationComponent describes how to instantiate a component that is part of an application."
    },
    "playground_oam3ApplicationComponentStatus": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name with the name of the application component"
        },
        "healthy": {
          "type": "boolean",
          "title": "Healty with a bool to indicate if the application component is healthy or not"
        },
        "message": {
          "type": "string",
          "title": "Message with information about health status of App component"
        },
        "traits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/playground_oam3ApplicationTraitStatus"
          },
          "title": "Traits with the traits health status"
        }
      },
      "description": "ApplicationComponentStatus defines the status of a component."
    },
    "playground_oam3ApplicationPolicy": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the policy."
        },
        "type": {
          "type": "string",
          "description": "Type of policy."
        },
        "properties": {
          "type": "object",
          "description": "Properties of the policy."
        }
      },
      "description": "ApplicationPolicy defines a global policy for the all components in the application."
    },
    "playground_oam3ApplicationSpec": {
      "type": "object",
      "properties": {
        "components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/playground_oam3ApplicationComponent"
          },
          "description": "Components associated with the application."
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/playground_oam3ApplicationPolicy"
          },
          "description": "Policies defines global characteristics for all components in the application. The evaluation of policies occurrs\nafter the components are rendered, and before the workflow steps are triggered."
        },
        "workflow": {
          "$ref": "#/definitions/playground_oam3ApplicationWorkflow",
          "description": "Workflow associated with the application. If present, the workflow defines a series of steps that are executed in order\nwith the AppRevision as source. Notice that the runtime does not applies resources if a workflow is present, as this is\ndelegated to the workflow processing stage."
        }
      },
      "description": "ApplicationSpec with the specification of the application including components, policies and workflows."
    },
    "playground_oam3ApplicationStatus": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/playground_oam3Condition"
          },
          "description": "Conditions of the application."
        },
        "status": {
          "type": "string",
          "description": "Status of the application."
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/playground_oam3ApplicationComponentStatus"
          },
          "description": "Services record the status of the application components."
        },
        "workflow": {
          "$ref": "#/definitions/playground_oam3WorkflowStatus",
          "description": "Workflow status."
        }
      },
      "description": "ApplicationStatus with the overall application status including components, traits, and workflow."
    },
    "playground_oam3ApplicationTrait": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the trait."
        },
        "properties": {
          "type": "object",
          "title": "Properties of the trait"
        }
      },
      "description": "ApplicationTrait with the properties of a traits that is being applied to a component."
    },
    "playground_oam3ApplicationTraitStatus": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "title": "Type with the trait name"
        },
        "healthy": {
          "type": "boolean",
          "title": "Healthy with a bool to indicate if the trait is healthy or no"
        },
        "message": {
          "type": "string",
          "title": "Message with information about health status of trait"
        }
      },
      "description": "ApplicationTraitStatus defines the status of a trait linked to a component."
    },
    "playground_oam3ApplicationWorkflow": {
      "type": "object",
      "properties": {
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/playground_oam3WorkflowStep"
          },
          "title": "steps with an array of steps"
        }
      },
      "description": "ApplicationWorkflow defines a workflow that is executed at an application level."
    },
    "playground_oam3Condition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time."
        },
        "status": {
          "type": "string",
          "title": "Status of this condition"
        },
        "last_transition_time": {
          "type": "string",
          "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.\nIt is represented in RFC3339 form and is in UTC."
        },
        "reason": {
          "type": "string",
          "description": "Reason for this condition's last transition from one status to another."
        },
        "message": {
          "type": "string",
          "description": "Message containing details about this condition's last transition from\none status to another, if any."
        }
      },
      "description": "Condition in which a resource can be."
    },
    "playground_oam3InputItem": {
      "type": "object",
      "properties": {
        "parameter_key": {
          "type": "string",
          "description": "ParameterKey poiting to where the value will be applied."
        },
        "from": {
          "type": "string",
          "description": "From indicating the source of the value."
        }
      },
      "description": "InputItem defines values that are taken from other components or workflow steps and can be used as parameters."
    },
    "playground_oam3Metadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the resource"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations of the resource."
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels related to the resource."
        },
        "uid": {
          "type": "string",
          "title": "UID is the unique in time and space value for this object. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
        },
        "creation_timestamp": {
          "type": "string",
          "description": "CreationTimestamp with the server time when the object was created.\nIt is represented in RFC3339 form and is in UTC."
        }
      },
      "description": "Metadata associated with a kubernetes entity."
    },
    "playground_oam3OutputItem": {
      "type": "object",
      "properties": {
        "value_from": {
          "type": "string",
          "description": "ValueFrom indicates the source of the value."
        },
        "name": {
          "type": "string",
          "description": "Name of the value for future referencing."
        }
      },
      "description": "OutputItem defines values that are exposed by this component or workflow step."
    },
    "playground_oam3WorkflowStatus": {
      "type": "object",
      "properties": {
        "app_revision": {
          "type": "string",
          "title": "AppRevision with the application revision"
        },
        "mode": {
          "type": "string",
          "title": "Mode with the mode of the workflw (DAG od StepByStep)"
        },
        "message": {
          "type": "string",
          "title": "Message with information about health status of workflow"
        },
        "suspend": {
          "type": "boolean",
          "title": "Suspend to indicate if the workflow is suspend"
        },
        "terminated": {
          "type": "boolean",
          "title": "Terminated to indicate if the workflow is terminated"
        },
        "finished": {
          "type": "boolean",
          "description": "Finished indicates that the workflow was completely executed with success."
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/playground_oam3WorkflowStepStatus"
          },
          "title": "steps wit information about the steps in the workflow"
        },
        "start_time": {
          "type": "string",
          "title": "StartTime with the time when the workflow started"
        }
      },
      "title": "WorkflowStatus defines the overall status of an application workflow"
    },
    "playground_oam3WorkflowStep": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the step."
        },
        "type": {
          "type": "string",
          "description": "Type of step."
        },
        "properties": {
          "type": "object",
          "description": "Properties of the step type."
        },
        "depends_on": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "DependsOn indicates step dependencies."
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/playground_oam3InputItem"
          },
          "description": "Inputs that are used in the workflow step."
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/playground_oam3OutputItem"
          },
          "description": "Outputs produced by the workflow step."
        }
      },
      "description": "WorkflowStep defining a stage in the workflow process."
    },
    "playground_oam3WorkflowStepStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "ID with the step identifier"
        },
        "name": {
          "type": "string",
          "title": "Name with the step name"
        },
        "type": {
          "type": "string",
          "title": "Type with the workflowstep type"
        },
        "phase": {
          "type": "string",
          "title": "Phase with the phase of the workflowstep (succeeded, failed, stopped or running)"
        },
        "message": {
          "type": "string",
          "title": "Message with information about health status of the workflow step"
        },
        "reason": {
          "type": "string",
          "description": "Reason with a  brief CamelCase message indicating details about why the workflowStep is in this state."
        },
        "first_execute_time": {
          "type": "string",
          "description": "FirstExecuteTime is the first time this step execution."
        },
        "last_execute_time": {
          "type": "string",
          "description": "LastExecuteTime is the last time this step execution."
        }
      },
      "description": "WorkflowStepStatus defines the status of a single step in an application workflow."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    }
  }
}
